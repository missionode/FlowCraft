Project Structure:
==================
.
|-- assets
|   `-- style.css
|-- index.html
|-- js
|   |-- app.js
|   |-- db.js
|   |-- events.js
|   |-- export.js
|   |-- state.js
|   `-- ui.js
|-- pages
|   |-- help.html
|   `-- preferences.html
`-- project_code.txt




### START OF FILE: ./index.html ####################################################

<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-50">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UX Architect</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'brand-primary': '#1E40AF',
            'brand-secondary': '#DBEAFE',
            'brand-accent': '#3B82F6',
          },
        }
      }
    }
  </script>
    <link rel="stylesheet" href="assets/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body class="h-full flex flex-col font-sans antialiased">

    <!-- Header -->
    <header class="flex items-center justify-between p-3 border-b bg-white flex-shrink-0 z-20">
        <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-2">
                <span class="font-bold text-xl text-brand-primary bg-brand-secondary rounded-lg px-3 py-1">U</span>
                <h1 id="project-title" class="text-xl font-semibold text-gray-800 cursor-pointer">Untitled Project</h1>
            </div>
        </div>
        <div class="flex items-center space-x-2">
            <button id="help-btn" class="px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-100 rounded-md"><i class="fas fa-question-circle mr-2"></i>Help</button>
            <button id="preferences-btn" class="px-4 py-2 text-sm font-medium text-gray-600 hover:bg-gray-100 rounded-md"><i class="fas fa-cog mr-2"></i>Preferences</button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex flex-grow overflow-hidden">
        <!-- Left Panel: Library (Personas & Sitemap) -->
        <aside id="left-panel" class="w-1/4 max-w-xs bg-white border-r p-4 flex flex-col space-y-4">
            <!-- Personas Section -->
            <div class="flex-shrink-0">
                <div class="flex justify-between items-center mb-2">
                    <h2 class="text-lg font-bold text-gray-900">Personas</h2>
                    <button id="add-persona-btn" class="text-brand-primary hover:text-white hover:bg-brand-primary rounded-full w-7 h-7 flex items-center justify-center transition-colors"><i class="fas fa-plus"></i></button>
                </div>
                <ul id="personas-list" class="space-y-1"></ul>
            </div>
            
            <!-- Sitemap Section -->
            <div class="flex-grow flex flex-col min-h-0">
                <div class="flex justify-between items-center mb-2 flex-shrink-0">
                    <h2 class="text-lg font-bold text-gray-900">Sitemap</h2>
                    <button id="add-sitemap-page-btn" class="text-brand-primary hover:text-white hover:bg-brand-primary rounded-full w-7 h-7 flex items-center justify-center transition-colors"><i class="fas fa-plus"></i></button>
                </div>
                <div id="sitemap-tree" class="flex-grow overflow-y-auto pr-2"></div>
            </div>
        </aside>

        <!-- Center Panel: Canvas -->
        <div id="center-panel" class="flex-grow bg-gray-50 relative overflow-hidden">
             <div id="canvas-container" class="w-full h-full cursor-grab">
                <svg id="canvas-svg" class="absolute top-0 left-0 w-full h-full"></svg>
                <div id="nodes-container" class="absolute top-0 left-0"></div>
            </div>
            <!-- Flow Controls -->
            <div class="absolute top-4 left-4 bg-white p-2 rounded-lg shadow-md flex items-center space-x-2">
                 <select id="flow-selector" class="text-sm font-semibold rounded-md border-gray-300 shadow-sm focus:border-brand-primary focus:ring-brand-primary"></select>
                 <button id="add-flow-btn" class="text-gray-600 hover:bg-gray-100 rounded-md p-2"><i class="fas fa-plus"></i></button>
                 <button id="delete-flow-btn" class="text-gray-600 hover:bg-red-100 hover:text-red-600 rounded-md p-2"><i class="fas fa-trash"></i></button>
            </div>
        </div>

        <!-- Right Panel: Inspector -->
        <aside id="right-panel" class="w-1/4 max-w-xs bg-white border-l p-4 overflow-y-auto">
             <div id="inspector-content">
                <div class="text-center text-gray-500 italic mt-8">Select an item to see its properties.</div>
            </div>
        </aside>
    </main>
    
    <!-- Modal Container -->
    <div id="modal-container"></div>

    <script type="module" src="js/app.js"></script>
</body>
</html>

### END OF FILE: ./index.html ######################################################



### START OF FILE: ./js/events.js ####################################################

// Contains all event listeners for the application.
import { getState, setState, setSelectedItem, updateItemDetails, addPersona, addSitemapPage, addNodeToFlow, updateElementPosition, addUserFlow, setActiveFlow, addConnection, getActiveFlow, deleteConnection, addHubToConnection } from './state.js';
import { renderAll, createModal, closeModal } from './ui.js';

let isDrawingConnection = false;
let isDragging = false;
let isPanning = false;
let activeDragId = null;
let tempConnectionLine = null;

export function initEventListeners() {
    document.getElementById('project-title').addEventListener('click', handleProjectTitleClick);
    document.getElementById('personas-list').addEventListener('click', (e) => handleItemSelection(e, 'persona'));
    const sitemapTree = document.getElementById('sitemap-tree');
    sitemapTree.addEventListener('click', (e) => handleItemSelection(e, 'sitemap'));
    sitemapTree.addEventListener('dragstart', handleSitemapDragStart);
    document.getElementById('add-persona-btn').addEventListener('click', handleAddPersona);
    document.getElementById('add-sitemap-page-btn').addEventListener('click', handleAddSitemapPage);
    const inspectorContent = document.getElementById('inspector-content');
    inspectorContent.addEventListener('input', handleInspectorInput);
    inspectorContent.addEventListener('change', handleInspectorChange);
    inspectorContent.addEventListener('click', handleInspectorClick);
    const canvasContainer = document.getElementById('canvas-container');
    canvasContainer.addEventListener('dragover', handleCanvasDragOver);
    canvasContainer.addEventListener('drop', handleCanvasDrop);
    canvasContainer.addEventListener('mousedown', handleCanvasMouseDown);
    canvasContainer.addEventListener('click', handleCanvasClick);
    document.addEventListener('mousemove', handleGlobalMouseMove);
    document.addEventListener('mouseup', handleGlobalMouseUp);
    document.getElementById('add-flow-btn').addEventListener('click', handleAddFlow);
    document.getElementById('flow-selector').addEventListener('change', handleFlowChange);
}

// --- Event Handler Implementations ---

function handleCanvasMouseDown(e) {
    const target = e.target;
    const draggableTarget = target.closest('.node, .hub');

    if (target.classList.contains('node-handle') || target.classList.contains('hub-handle')) {
        isDrawingConnection = true;
        activeDragId = target.dataset.id;
        tempConnectionLine = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        tempConnectionLine.setAttribute('class', 'temp-connection');
        tempConnectionLine.setAttribute('marker-end', 'url(#arrowhead)');
        document.getElementById('canvas-svg').appendChild(tempConnectionLine);
        e.stopPropagation();

    } else if (draggableTarget) {
        isDragging = true;
        activeDragId = draggableTarget.dataset.id;
        const state = getState();
        const { zoom } = state.canvas;
        const startPos = { x: e.clientX, y: e.clientY };
        
        const activeFlow = getActiveFlow();
        let element = activeFlow.visualLayout.nodes.find(n => n.nodeId === activeDragId) || activeFlow.visualLayout.hubs.find(h => h.id === activeDragId);
        const initialPos = { x: element.x, y: element.y };

        document.onmousemove_drag = (moveEvent) => {
            const dx = (moveEvent.clientX - startPos.x) / zoom;
            const dy = (moveEvent.clientY - startPos.y) / zoom;
            updateElementPosition(activeDragId, initialPos.x + dx, initialPos.y + dy, false);
            renderAll();
        };

    } else {
        isPanning = true;
        const state = getState();
        const startPos = { x: e.clientX, y: e.clientY };
        const initialPan = { ...state.canvas.pan };
        
        document.onmousemove_pan = (moveEvent) => {
            const dx = moveEvent.clientX - startPos.x;
            const dy = moveEvent.clientY - startPos.y;
            state.canvas.pan.x = initialPan.x + dx;
            state.canvas.pan.y = initialPan.y + dy;
            setState(state, false);
            renderAll();
        };
    }
}

function handleCanvasClick(e) {
    if (e.target.classList.contains('connection-interaction-area')) {
        const connectionId = e.target.dataset.id;
        const activeFlow = getActiveFlow();
        const conn = activeFlow.visualLayout.connections.find(c => c.id === connectionId);
        
        // Only allow splitting of direct node-to-node connections
        const fromIsNode = activeFlow.visualLayout.nodes.some(n => n.nodeId === conn.from);
        const toIsNode = activeFlow.visualLayout.nodes.some(n => n.nodeId === conn.to);
        
        if (fromIsNode && toIsNode) {
            addHubToConnection(connectionId, e.clientX, e.clientY);
        } else {
             setSelectedItem(connectionId, 'connection');
             renderAll();
        }
    }
}

function handleGlobalMouseMove(e) {
    if (document.onmousemove_drag) document.onmousemove_drag(e);
    if (document.onmousemove_pan) document.onmousemove_pan(e);

    if (isDrawingConnection) {
        const state = getState();
        const activeFlow = getActiveFlow();
        const allElements = [...activeFlow.visualLayout.nodes, ...activeFlow.visualLayout.hubs];
        const startElement = allElements.find(el => (el.nodeId || el.id) === activeDragId);
        const startEl = document.getElementById(activeDragId);
        if (!startEl) return;

        const isHub = startEl.classList.contains('hub');
        const startPos = {
            x: startElement.x + (isHub ? startEl.offsetWidth / 2 : startEl.offsetWidth),
            y: startElement.y + startEl.offsetHeight / 2
        };

        const { pan, zoom } = state.canvas;
        const canvasRect = document.getElementById('canvas-container').getBoundingClientRect();
        const endX = (e.clientX - canvasRect.left - pan.x) / zoom;
        const endY = (e.clientY - canvasRect.top - pan.y) / zoom;
        tempConnectionLine.setAttribute('d', `M ${startPos.x} ${startPos.y} L ${endX} ${endY}`);
    }
}

function handleGlobalMouseUp(e) {
    if (isDrawingConnection) {
        const endTarget = e.target.closest('.node, .hub');
        if (endTarget) {
            const endElementId = endTarget.dataset.id;
            addConnection(activeDragId, endElementId, activeDragId.startsWith('hub'));
        }
        if (tempConnectionLine) tempConnectionLine.remove();
        renderAll();
    }
    
    if (isDragging) {
        setState(getState());
    }

    isDrawingConnection = false;
    isDragging = false;
    isPanning = false;
    activeDragId = null;
    tempConnectionLine = null;
    document.onmousemove_drag = null;
    document.onmousemove_pan = null;
}

function handleInspectorClick(e) {
    if (e.target.id === 'delete-connection-btn') {
        const { selectedItemId } = getState();
        if (confirm('Are you sure you want to delete this connection?')) {
            deleteConnection(selectedItemId);
            setSelectedItem(null, null);
            renderAll();
        }
    }
}

function handleInspectorInput(e) {
    if (e.target.type === 'checkbox') return;
    const { selectedItemId, selectedItemType } = getState();
    if (!selectedItemId || !selectedItemType) return;
    const property = e.target.dataset.property;
    const value = e.target.value;
    if (property) {
        updateItemDetails(selectedItemId, selectedItemType, { [property]: value });
        if (selectedItemType === 'connection' || property === 'name') {
            renderAll();
        }
    }
}

function handleSitemapDragStart(e) {
    const target = e.target.closest('[data-id]');
    if (target) {
        e.dataTransfer.setData('text/plain', target.dataset.id);
        e.dataTransfer.effectAllowed = 'copy';
    }
}

function handleCanvasDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
}

function handleCanvasDrop(e) {
    e.preventDefault();
    const pageId = e.dataTransfer.getData('text/plain');
    if (!pageId) return;
    const canvasRect = e.currentTarget.getBoundingClientRect();
    addNodeToFlow(pageId, e.clientX - canvasRect.left, e.clientY - canvasRect.top);
    renderAll();
}

function handleItemSelection(e, type) {
    const target = e.target.closest('[data-id]');
    if (target) {
        const id = target.dataset.id;
        setSelectedItem(id, type);
        renderAll();
    }
}

function handleInspectorChange(e) {
    const { selectedItemId, selectedItemType } = getState();
    if (!selectedItemId || !selectedItemType) return;
    if (e.target.name === 'persona-link' && selectedItemType === 'sitemap') {
        const linkedPersonaIds = Array.from(document.querySelectorAll('#inspector-persona-links input:checked')).map(input => input.value);
        updateItemDetails(selectedItemId, 'sitemap', { personaIds: linkedPersonaIds });
        renderAll();
    }
}

function handleAddFlow() {
    const title = 'Create New User Flow';
    const body = `
        <div>
            <label for="flow-name" class="block text-sm font-medium text-gray-700 mb-1">Flow Name</label>
            <input type="text" id="flow-name" placeholder="e.g., Checkout Process, Onboarding" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary">
        </div>
    `;
    const footerButtons = [
        { id: 'cancel-flow-btn', text: 'Cancel', class: 'bg-white hover:bg-gray-100 text-gray-700 border' },
        { id: 'save-flow-btn', text: 'Save Flow', class: 'bg-brand-primary hover:bg-blue-800 text-white' }
    ];

    createModal(title, body, footerButtons);

    document.getElementById('save-flow-btn').addEventListener('click', () => {
        const name = document.getElementById('flow-name').value.trim();
        if (name) {
            addUserFlow(name);
            renderAll();
            closeModal();
        } else {
            document.getElementById('flow-name').focus();
            document.getElementById('flow-name').classList.add('border-red-500');
        }
    });

    document.getElementById('cancel-flow-btn').addEventListener('click', closeModal);
}

function handleFlowChange(e) {
    const newFlowId = e.target.value;
    setActiveFlow(newFlowId);
    renderAll();
}

function handleProjectTitleClick(e) {
    const titleElement = e.target;
    const currentTitle = titleElement.textContent;
    const input = document.createElement('input');
    input.type = 'text';
    input.value = currentTitle;
    input.className = 'text-xl font-semibold text-gray-800 bg-gray-100 border border-brand-primary rounded-md px-1';
    titleElement.replaceWith(input);
    input.focus();
    input.select();
    const save = () => {
        const state = getState();
        state.projectName = input.value || 'Untitled Project';
        setState(state);
        input.replaceWith(titleElement);
        titleElement.textContent = state.projectName;
    };
    input.addEventListener('blur', save);
    input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') input.blur();
        if (e.key === 'Escape') {
            input.value = currentTitle;
            input.blur();
        }
    });
}

function handleAddPersona() {
    const title = 'Create New Persona';
    const body = `
        <div class="space-y-4">
            <div>
                <label for="persona-name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                <input type="text" id="persona-name" placeholder="e.g., Admin, Guest User" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary">
            </div>
            <div>
                <label for="persona-desc" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea id="persona-desc" rows="3" placeholder="Describe their goals and motivations..." class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary"></textarea>
            </div>
        </div>
    `;
    const footerButtons = [
        { id: 'cancel-persona-btn', text: 'Cancel', class: 'bg-white hover:bg-gray-100 text-gray-700 border' },
        { id: 'save-persona-btn', text: 'Save Persona', class: 'bg-brand-primary hover:bg-blue-800 text-white' }
    ];

    createModal(title, body, footerButtons);

    document.getElementById('save-persona-btn').addEventListener('click', () => {
        const name = document.getElementById('persona-name').value.trim();
        const description = document.getElementById('persona-desc').value.trim();
        if (name) {
            addPersona(name, description);
            renderAll();
            closeModal();
        } else {
            document.getElementById('persona-name').focus();
            document.getElementById('persona-name').classList.add('border-red-500');
        }
    });
    
    document.getElementById('cancel-persona-btn').addEventListener('click', closeModal);
}

function handleAddSitemapPage() {
    const { personas } = getState();
    const personaCheckboxes = personas.length > 0 ? personas.map(p => `
        <div class="flex items-center">
            <input id="persona-link-modal-${p.id}" name="persona-link-modal" type="checkbox" value="${p.id}" class="h-4 w-4 text-brand-primary border-gray-300 rounded focus:ring-brand-primary">
            <label for="persona-link-modal-${p.id}" class="ml-2 block text-sm text-gray-900">${p.name}</label>
        </div>
    `).join('') : '<p class="text-sm text-gray-500">No personas exist. Create one first to link it.</p>';

    const title = 'Create New Sitemap Page';
    const body = `
         <div class="space-y-4">
            <div>
                <label for="page-name" class="block text-sm font-medium text-gray-700 mb-1">Page Name</label>
                <input type="text" id="page-name" placeholder="e.g., Dashboard, Settings" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Link to Personas (optional)</label>
                <div class="space-y-2">${personaCheckboxes}</div>
            </div>
        </div>
    `;
     const footerButtons = [
        { id: 'cancel-page-btn', text: 'Cancel', class: 'bg-white hover:bg-gray-100 text-gray-700 border' },
        { id: 'save-page-btn', text: 'Save Page', class: 'bg-brand-primary hover:bg-blue-800 text-white' }
    ];

    createModal(title, body, footerButtons);

    document.getElementById('save-page-btn').addEventListener('click', () => {
        const name = document.getElementById('page-name').value.trim();
        const linkedPersonaIds = Array.from(
            document.querySelectorAll('input[name="persona-link-modal"]:checked')
        ).map(input => input.value);

        if(name) {
            addSitemapPage(name, null, linkedPersonaIds);
            renderAll();
            closeModal();
        } else {
             document.getElementById('page-name').focus();
            document.getElementById('page-name').classList.add('border-red-500');
        }
    });
    
    document.getElementById('cancel-page-btn').addEventListener('click', closeModal);
}

### END OF FILE: ./js/events.js ######################################################



### START OF FILE: ./js/ui.js ####################################################

// Handles all DOM manipulations and UI updates.
import { getState, getActiveFlow } from './state.js';

const elements = {
    projectTitle: document.getElementById('project-title'),
    personaslist: document.getElementById('personas-list'),
    sitemapTree: document.getElementById('sitemap-tree'),
    flowSelector: document.getElementById('flow-selector'),
    nodesContainer: document.getElementById('nodes-container'),
    svgCanvas: document.getElementById('canvas-svg'),
    inspectorContent: document.getElementById('inspector-content'),
    modalContainer: document.getElementById('modal-container'),
};

function renderPersonas() {
    const { personas, selectedItemId, selectedItemType } = getState();
    elements.personaslist.innerHTML = personas.map(p => {
        const isSelected = selectedItemId === p.id && selectedItemType === 'persona';
        return `
        <li data-id="${p.id}" class="p-2 rounded-md hover:bg-gray-100 cursor-pointer text-sm ${isSelected ? 'bg-brand-secondary text-brand-primary font-semibold' : ''}">
            ${p.name}
        </li>
    `}).join('') || `<li class="text-xs text-gray-400 p-2">No personas created yet.</li>`;
}

function renderSitemap() {
    const { sitemap, personas, selectedItemId, selectedItemType } = getState();
    const buildTree = (parentId = null) => {
        const children = sitemap.filter(page => page.parentId === parentId);
        if (children.length === 0) return '';
        return `<ul class="${parentId ? 'pl-4 border-l-2 border-gray-200' : ''}">
            ${children.map(page => {
                const isSelected = selectedItemId === page.id && selectedItemType === 'sitemap';
                const personaTags = (page.personaIds || [])
                    .map(pId => personas.find(p => p.id === pId))
                    .filter(Boolean)
                    .map(p => `<span class="inline-block bg-blue-100 text-blue-800 text-xs font-semibold ml-2 px-2 py-0.5 rounded-full" title="${p.name}">${p.name.charAt(0)}</span>`)
                    .join('');

                return `
                <li data-id="${page.id}" draggable="true" class="p-1 rounded-md hover:bg-gray-100 cursor-pointer text-sm group relative ${isSelected ? 'bg-brand-secondary text-brand-primary font-semibold' : ''}">
                    <div class="flex items-center">
                        <i class="fas fa-file-alt text-gray-400 mr-2"></i>
                        <span>${page.name}</span>
                        <div class="flex-grow"></div>
                        ${personaTags}
                    </div>
                    ${buildTree(page.id)}
                </li>
            `}).join('')}
        </ul>`;
    };
    elements.sitemapTree.innerHTML = buildTree() || `<div class="text-xs text-gray-400 p-2">No sitemap pages created yet.</div>`;
}

function renderFlowSelector() {
    const { userFlows, activeFlowId } = getState();
     elements.flowSelector.innerHTML = userFlows.map(flow => `
        <option value="${flow.id}" ${flow.id === activeFlowId ? 'selected' : ''}>
            ${flow.name}
        </option>
    `).join('');
}

function renderInspector() {
    const { selectedItemId, selectedItemType, personas, sitemap } = getState();
    if (!selectedItemId || !selectedItemType) {
        elements.inspectorContent.innerHTML = `<div class="text-center text-gray-500 italic mt-8">Select an item to see its properties.</div>`;
        return;
    }

    let item, html;
    if (selectedItemType === 'persona') {
        item = personas.find(p => p.id === selectedItemId);
        if (!item) return;
        html = `
            <div class="space-y-4">
                <h3 class="text-lg font-bold text-gray-900 flex items-center"><i class="fas fa-user-circle text-gray-400 mr-3"></i>Persona Details</h3>
                <div>
                    <label for="inspector-name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input type="text" id="inspector-name" data-property="name" value="${item.name}" class="w-full form-input">
                </div>
                <div>
                    <label for="inspector-desc" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="inspector-desc" data-property="description" rows="5" class="w-full form-input">${item.description}</textarea>
                </div>
            </div>
        `;
    } else if (selectedItemType === 'sitemap') {
        item = sitemap.find(s => s.id === selectedItemId);
        if (!item) return;

        const personaCheckboxes = personas.map(p => `
            <div class="flex items-center">
                <input id="persona-link-${p.id}" name="persona-link" type="checkbox" value="${p.id}" ${(item.personaIds || []).includes(p.id) ? 'checked' : ''} class="h-4 w-4 text-brand-primary border-gray-300 rounded focus:ring-brand-primary">
                <label for="persona-link-${p.id}" class="ml-2 block text-sm text-gray-900">${p.name}</label>
            </div>
        `).join('');

        html = `
            <div class="space-y-4">
                <h3 class="text-lg font-bold text-gray-900 flex items-center"><i class="fas fa-file-alt text-gray-400 mr-3"></i>Page Details</h3>
                <div>
                    <label for="inspector-name" class="block text-sm font-medium text-gray-700 mb-1">Page Name</label>
                    <input type="text" id="inspector-name" data-property="name" value="${item.name}" class="w-full form-input">
                </div>
                <div>
                    <label for="inspector-desc" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="inspector-desc" data-property="description" rows="4" class="w-full form-input">${item.description || ''}</textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Linked Personas</label>
                    <div id="inspector-persona-links" class="space-y-2">${personaCheckboxes || '<p class="text-xs text-gray-500">No personas exist to link.</p>'}</div>
                </div>
            </div>
        `;
    }
    
    elements.inspectorContent.innerHTML = html;

    elements.inspectorContent.querySelectorAll('input, textarea, select').forEach(el => {
        el.classList.add('px-3', 'py-2', 'border', 'border-gray-300', 'rounded-md', 'shadow-sm', 'focus:outline-none', 'focus:ring-brand-primary', 'focus:border-brand-primary');
    });
}


function renderNodes() {
    const activeFlow = getActiveFlow();
    const { sitemap } = getState();
    elements.nodesContainer.innerHTML = '';

    if (!activeFlow) return;

    const canShowHandle = activeFlow.visualLayout.nodes.length > 1;

    activeFlow.visualLayout.nodes.forEach(node => {
        const step = activeFlow.steps.find(s => s.stepId === node.stepId);
        if (!step) return;
        
        const page = sitemap.find(p => p.id === step.pageId);
        if (!page) return;

        const nodeEl = document.createElement('div');
        nodeEl.id = node.nodeId;
        nodeEl.dataset.id = node.nodeId;
        nodeEl.className = 'node absolute p-4 bg-white border border-gray-300 rounded-lg shadow-sm w-48 group';
        nodeEl.style.left = `${node.x}px`;
        nodeEl.style.top = `${node.y}px`;
        
        const handleHtml = canShowHandle 
            ? `<div class="node-handle" data-node-id="${node.nodeId}" title="Drag to connect"><i class="fas fa-plus pointer-events-none"></i></div>`
            : '';

        nodeEl.innerHTML = `
            <div class="font-bold text-gray-800 cursor-move">${page.name}</div>
            <p class="text-xs text-gray-500 mt-1 cursor-move">${step.action}</p>
            ${handleHtml}
        `;
        
        elements.nodesContainer.appendChild(nodeEl);
    });
}

function renderConnections() {
    const activeFlow = getActiveFlow();
    elements.svgCanvas.innerHTML = ''; 
    if (!activeFlow || !activeFlow.visualLayout.connections) return;

    const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
    const arrowHead = document.createElementNS('http://www.w3.org/2000/svg', 'marker');
    arrowHead.setAttribute('id', 'arrowhead');
    arrowHead.setAttribute('markerWidth', '10');
    arrowHead.setAttribute('markerHeight', '7');
    arrowHead.setAttribute('refX', '8.5');
    arrowHead.setAttribute('refY', '3.5');
    arrowHead.setAttribute('orient', 'auto');
    arrowHead.innerHTML = `<polygon points="0 0, 10 3.5, 0 7" fill="#6B7280" />`;
    defs.appendChild(arrowHead);
    elements.svgCanvas.appendChild(defs);

    activeFlow.visualLayout.connections.forEach(conn => {
        const fromNode = activeFlow.visualLayout.nodes.find(n => n.nodeId === conn.from);
        const toNode = activeFlow.visualLayout.nodes.find(n => n.nodeId === conn.to);
        if (!fromNode || !toNode) return;

        const fromEl = document.getElementById(fromNode.nodeId);
        const toEl = document.getElementById(toNode.nodeId);
        if (!fromEl || !toEl) return;

        const start = { x: fromNode.x + fromEl.offsetWidth, y: fromNode.y + fromEl.offsetHeight / 2 };
        const end = { x: toNode.x, y: toNode.y + toEl.offsetHeight / 2 };

        const pathData = `M ${start.x} ${start.y} L ${end.x} ${end.y}`;

        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.setAttribute('d', pathData);
        path.setAttribute('class', 'connection-path');
        path.setAttribute('marker-end', 'url(#arrowhead)');
        
        elements.svgCanvas.appendChild(path);
    });
}

function renderCanvasTransform() {
    const { canvas } = getState();
    const transform = `translate(${canvas.pan.x}px, ${canvas.pan.y}px) scale(${canvas.zoom})`;
    elements.nodesContainer.style.transform = transform;
    elements.svgCanvas.style.transform = transform;
}

export function renderAll() {
    const { projectName } = getState();
    elements.projectTitle.textContent = projectName;
    renderPersonas();
    renderSitemap();
    renderFlowSelector();
    renderInspector();
    renderNodes();
    renderConnections();
    renderCanvasTransform();
}

export function createModal(title, bodyHtml, footerButtons = []) {
    const modalContent = `
        <div id="app-modal-backdrop" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
                <div class="p-6 border-b">
                    <h2 class="text-xl font-bold text-gray-800">${title}</h2>
                </div>
                <div class="p-6">
                    ${bodyHtml}
                </div>
                <div class="px-6 py-4 bg-gray-50 rounded-b-lg flex justify-end space-x-3">
                    ${footerButtons.map(btn => `
                        <button id="${btn.id}" class="${btn.class || 'bg-gray-200 hover:bg-gray-300 text-gray-800'} px-4 py-2 rounded-md text-sm font-medium transition-colors">
                            ${btn.text}
                        </button>
                    `).join('')}
                </div>
            </div>
        </div>
    `;
    elements.modalContainer.innerHTML = modalContent;
    const backdrop = document.getElementById('app-modal-backdrop');
    backdrop.addEventListener('click', (e) => {
        if (e.target === backdrop) closeModal();
    });
}
export function closeModal() {
    elements.modalContainer.innerHTML = '';
}

### END OF FILE: ./js/ui.js ######################################################



### START OF FILE: ./js/export.js ####################################################

// Handles the logic for exporting the application state to JSON.
import { getState } from './state.js';

function formatStateForExport() {
    const state = getState();
    
    // Create a deep copy to avoid modifying the original state
    const exportState = JSON.parse(JSON.stringify(state));

    const formatted = {
        projectInfo: {
            projectName: exportState.projectName,
            projectDescription: exportState.projectDescription,
            exportDate: new Date().toISOString(),
            version: "1.0"
        },
        personas: exportState.personas,
        sitemap: exportState.sitemap,
        userFlows: exportState.userFlows
    };
    
    return formatted;
}


export function exportStateAsJson() {
    const exportData = formatStateForExport();
    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(exportData, null, 2));
    
    const downloadAnchorNode = document.createElement('a');
    downloadAnchorNode.setAttribute("href", dataStr);
    
    const fileName = `${exportData.projectInfo.projectName.replace(/\s+/g, '_') || 'Untitled_Project'}.json`;
    downloadAnchorNode.setAttribute("download", fileName);
    
    document.body.appendChild(downloadAnchorNode);
    downloadAnchorNode.click();
    downloadAnchorNode.remove();
}

### END OF FILE: ./js/export.js ######################################################



### START OF FILE: ./js/db.js ####################################################

// Manages IndexedDB interactions.
// Handles saving and loading project data.

console.log("Database Module Loaded.");

### END OF FILE: ./js/db.js ######################################################



### START OF FILE: ./js/state.js ####################################################

// Manages the application's state.

let state = {};
let history = [];
let historyIndex = -1;

// --- State Initialization ---
export function getInitialState() {
    const initialFlowId = `flow_${Date.now()}`;
    return {
        projectName: 'Untitled Project',
        projectDescription: 'A new user experience plan.',
        personas: [],
        sitemap: [],
        userFlows: [{
            id: initialFlowId,
            name: 'Main Flow',
            description: '',
            personaId: null,
            steps: [],
            visualLayout: { nodes: [], hubs: [], connections: [] }
        }],
        activeFlowId: initialFlowId,
        selectedItemId: null,
        selectedItemType: null, // 'persona', 'sitemap', 'node', 'hub', or 'connection'
        canvas: {
            pan: { x: 0, y: 0 },
            zoom: 1,
        }
    };
}

// --- State Accessors ---
export function getState() {
    return state;
}

export function getActiveFlow() {
    if (!state.activeFlowId) return null;
    return state.userFlows.find(flow => flow.id === state.activeFlowId);
}

// --- State Mutators & History ---
export function setState(newState, recordHistory = true) {
    if (recordHistory) {
        if (historyIndex < history.length - 1) {
            history = history.slice(0, historyIndex + 1);
        }
        history.push(JSON.parse(JSON.stringify(state)));
        historyIndex++;
        if(history.length > 50) {
            history.shift();
            historyIndex--;
        }
    }
    state = newState;
    if(state.userFlows.length > 0 && !state.activeFlowId) {
        state.activeFlowId = state.userFlows[0].id;
    }
}

// --- Domain-specific Actions ---

export function addHubToConnection(connectionId, x, y) {
    const activeFlow = getActiveFlow();
    if (!activeFlow) return;
    const { pan, zoom } = state.canvas;

    const originalConnection = activeFlow.visualLayout.connections.find(c => c.id === connectionId);
    if (!originalConnection) return;

    // 1. Create the new hub
    const newHub = {
        id: `hub_${Date.now()}`,
        x: (x - pan.x) / zoom,
        y: (y - pan.y) / zoom
    };
    activeFlow.visualLayout.hubs.push(newHub);

    // 2. Create connection from original start to the new hub
    addConnection(originalConnection.from, newHub.id, true);

    // 3. Create connection from the new hub to the original end
    addConnection(newHub.id, originalConnection.to, true);

    // 4. Delete the original connection
    deleteConnection(connectionId, false); // Don't record history for this sub-step

    setState(state); // Record the final state of the whole operation
}

export function addConnection(fromId, toId, isHubSource = false) {
    const activeFlow = getActiveFlow();
    if (!activeFlow || fromId === toId) return;

    const exists = activeFlow.visualLayout.connections.some(c => c.from === fromId && c.to === toId);
    if (exists) return;

    const newConnection = {
        id: `conn_${Date.now()}`,
        from: fromId,
        to: toId,
        label: isHubSource ? 'Condition' : 'User action'
    };
    activeFlow.visualLayout.connections.push(newConnection);
    setState(state);
}

export function deleteConnection(connectionId, recordHistory = true) {
    const activeFlow = getActiveFlow();
    if (!activeFlow) return;
    activeFlow.visualLayout.connections = activeFlow.visualLayout.connections.filter(c => c.id !== connectionId);
    if (recordHistory) setState(state);
}

export function setActiveFlow(flowId) {
    state.activeFlowId = flowId;
    setState(state, false);
}

export function addUserFlow(name) {
    const newFlow = {
        id: `flow_${Date.now()}`,
        name,
        description: '',
        personaId: null,
        steps: [],
        visualLayout: { nodes: [], hubs: [], connections: [] }
    };
    state.userFlows.push(newFlow);
    state.activeFlowId = newFlow.id;
    setState(state);
    return newFlow;
}

export function setSelectedItem(id, type) {
    state.selectedItemId = id;
    state.selectedItemType = type;
    setState(state, false); 
}

export function updateItemDetails(id, type, updatedDetails) {
    let item;
    if (type === 'persona') {
        item = state.personas.find(p => p.id === id);
    } else if (type === 'sitemap') {
        item = state.sitemap.find(s => s.id === id);
    } else if (type === 'connection') {
        const activeFlow = getActiveFlow();
        if (activeFlow) item = activeFlow.visualLayout.connections.find(c => c.id === id);
    }
    
    if (item) {
        Object.assign(item, updatedDetails);
        setState(state);
    }
}

export function addPersona(name, description) {
    const newPersona = { id: `persona_${Date.now()}`, name, description };
    state.personas.push(newPersona);
    setState(state);
    return newPersona;
}

export function addSitemapPage(name, parentId = null, personaIds = []) {
    const newPage = {
        id: `page_${Date.now()}`,
        name,
        path: `/${name.toLowerCase().replace(/\s+/g, '-')}`,
        parentId,
        description: '',
        personaIds: personaIds
    };
    state.sitemap.push(newPage);
    setState(state);
    return newPage;
}

export function addNodeToFlow(pageId, x, y) {
    const activeFlow = getActiveFlow();
    if (!activeFlow) return;
    const { pan, zoom } = state.canvas;

    const newStep = { stepId: `step_${Date.now()}`, pageId: pageId, action: "User interacts with this page." };
    activeFlow.steps.push(newStep);

    const newNode = {
        nodeId: `vis_node_${Date.now()}`,
        stepId: newStep.stepId,
        x: (x - pan.x) / zoom,
        y: (y - pan.y) / zoom,
    };
    activeFlow.visualLayout.nodes.push(newNode);
    setState(state);
}

export function updateElementPosition(elementId, x, y, recordHistory = true) {
    const activeFlow = getActiveFlow();
    if (!activeFlow) return;
    let element = activeFlow.visualLayout.nodes.find(n => n.nodeId === elementId);
    if (!element) {
        element = activeFlow.visualLayout.hubs.find(h => h.id === elementId);
    }
    if (element) {
        element.x = x;
        element.y = y;
        setState(state, recordHistory);
    }
}

### END OF FILE: ./js/state.js ######################################################



### START OF FILE: ./js/app.js ####################################################

// Main application entry point.
import { setState, getInitialState } from './state.js';
import { renderAll } from './ui.js';
import { initEventListeners } from './events.js';
// import { loadProject } from './db.js';

function init() {
    console.log("UX Architect App Initializing...");
    
    // For now, we start with a fresh state.
    // Later, this will be replaced with loadProject()
    const initialState = getInitialState();
    setState(initialState, false); // Initial state should not be part of history
    
    initEventListeners();
    
    renderAll();
    
    console.log("Application ready.");
}

// Wait for the DOM to be fully loaded before initializing
document.addEventListener('DOMContentLoaded', init);

### END OF FILE: ./js/app.js ######################################################



### START OF FILE: ./assets/style.css ####################################################

/* For custom styles that can't be handled by Tailwind */
#canvas-container {
    background-image: radial-gradient(#dbeafe 1px, transparent 1px);
    background-size: 20px 20px;
}

.form-input {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-primary focus:border-brand-primary sm:text-sm;
}

/* --- Nodes & Hubs --- */
.node-handle, .hub-handle {
    @apply absolute top-1/2 -translate-y-1/2 w-6 h-6 bg-white border-2 border-brand-primary rounded-full cursor-pointer opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center text-brand-primary;
}
.node-handle { @apply -right-3; }
.hub-handle { @apply -right-3; } /* Hubs can also start connections */

.node-handle:hover, .hub-handle:hover {
    @apply bg-brand-primary text-white;
}

.hub {
    @apply absolute w-10 h-10 bg-white border-2 border-gray-400 rotate-45 group;
}

/* --- Connection Paths --- */
.connection-path {
    stroke: #6B7280; /* gray-500 */
    stroke-width: 2;
    fill: none;
    transition: stroke 0.2s;
}
.connection-path.selected {
    stroke: #3B82F6; /* brand-accent */
    stroke-width: 3.5;
}
.connection-arrow-head {
    fill: #6B7280;
    transition: fill 0.2s;
}
.connection-path.selected + .connection-arrow-head {
    fill: #3B82F6;
}
.connection-interaction-area {
    stroke: transparent;
    stroke-width: 20;
    fill: none;
    cursor: pointer;
}
.connection-label {
    font-size: 12px;
    fill: #4B5563; /* gray-600 */
    paint-order: stroke;
    stroke: #fff;
    stroke-width: 3px;
    stroke-linecap: butt;
    stroke-linejoin: miter;
}

.temp-connection {
    stroke: #3B82F6; /* brand-accent */
    stroke-width: 2;
    stroke-dasharray: 6, 6;
    fill: none;
}

### END OF FILE: ./assets/style.css ######################################################



### START OF FILE: ./pages/preferences.html ####################################################

<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-50">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preferences - UX Architect</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="p-8">
    <h1 class="text-3xl font-bold mb-6">Preferences</h1>
    <!-- Content will be added later -->
</body>
</html>

### END OF FILE: ./pages/preferences.html ######################################################



### START OF FILE: ./pages/help.html ####################################################

<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-50">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Help - UX Architect</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="p-8">
    <h1 class="text-3xl font-bold mb-6">Help & Documentation</h1>
    <!-- Content will be added later -->
</body>
</html>

### END OF FILE: ./pages/help.html ######################################################



